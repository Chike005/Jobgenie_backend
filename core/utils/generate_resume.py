from docx import Document
from io import BytesIO
from datetime import date

def create_resume(payload: dict) -> bytes:
    """
    Expected payload keys:
      name (str), title (str), location (str), email (str), phone (str),
      summary (str), skills (list[str]),
      experience (list[{"role":str,"company":str,"start":str,"end":str,"bullets":list[str]}]),
      education (list[{"degree":str,"school":str,"year":str}]),
      projects (list[{"name":str,"stack":str,"bullets":list[str]}])
    """
    name = payload.get("name", "John Doe")
    title = payload.get("title", "Software Engineer")
    location = payload.get("location", "")
    email = payload.get("email", "")
    phone = payload.get("phone", "")
    summary = payload.get("summary", "")
    skills = payload.get("skills", [])
    experience = payload.get("experience", [])
    education = payload.get("education", [])
    projects = payload.get("projects", [])

    doc = Document()
    doc.add_heading(name, 0)
    header = doc.add_paragraph(f"{title}\n{location} | {email} | {phone}")

    if summary:
        doc.add_heading("Professional Summary", level=1)
        doc.add_paragraph(summary)

    if skills:
        doc.add_heading("Technical Skills", level=1)
        doc.add_paragraph(", ".join(skills))

    if experience:
        doc.add_heading("Experience", level=1)
        for x in experience:
            role = x.get("role", "")
            company = x.get("company", "")
            start = x.get("start", "")
            end = x.get("end", "Present")
            bullets = x.get("bullets", [])
            doc.add_paragraph(f"{role} – {company} ({start} – {end})")
            for b in bullets:
                doc.add_paragraph(b, style="List Bullet")

    if projects:
        doc.add_heading("Projects", level=1)
        for p in projects:
            name_ = p.get("name", "")
            stack = p.get("stack", "")
            bullets = p.get("bullets", [])
            doc.add_paragraph(f"{name_} – {stack}")
            for b in bullets:
                doc.add_paragraph(b, style="List Bullet")

    if education:
        doc.add_heading("Education", level=1)
        for edu in education:
            degree = edu.get("degree", "")
            school = edu.get("school", "")
            year = edu.get("year", "")
            doc.add_paragraph(f"{degree} – {school} ({year})")

    # footer date
    doc.add_paragraph(f"\nGenerated by JobGenie • {date.today().isoformat()}")

    buf = BytesIO()
    doc.save(buf)
    buf.seek(0)
    return buf.getvalue()
